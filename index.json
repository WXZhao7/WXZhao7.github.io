[{"categories":null,"content":"just a demo ","date":"2023-07-09","objectID":"/demo/:0:0","tags":null,"title":"Demo","uri":"/demo/"},{"categories":null,"content":"test github actions ","date":"2023-07-09","objectID":"/demo/:1:0","tags":null,"title":"Demo","uri":"/demo/"},{"categories":null,"content":"基础部分 ","date":"2021-09-16","objectID":"/android-diy/:0:0","tags":["安卓","DIY"],"title":"安卓玩机(DIY)心得记录","uri":"/android-diy/"},{"categories":null,"content":"环境说明 手机因为BootLoader琐的原因, 暂时选用的是MIUI系统的手机 电脑基本是必须的, 因为adb等也是需要的 ","date":"2021-09-16","objectID":"/android-diy/:1:0","tags":["安卓","DIY"],"title":"安卓玩机(DIY)心得记录","uri":"/android-diy/"},{"categories":null,"content":"电脑环境搭建 下载MiFlash安装对应驱动, 保证连接驱动正确 解锁手机以进行后续步骤 ","date":"2021-09-16","objectID":"/android-diy/:1:1","tags":["安卓","DIY"],"title":"安卓玩机(DIY)心得记录","uri":"/android-diy/"},{"categories":null,"content":"手机环境架构 第三方RECOVERY 对于刷系统较为重要 ROOT权限的获取 Super SU [旧时代产物] 系统ROOT [权限并不完整] Magisk ","date":"2021-09-16","objectID":"/android-diy/:1:2","tags":["安卓","DIY"],"title":"安卓玩机(DIY)心得记录","uri":"/android-diy/"},{"categories":null,"content":"省电部分 ","date":"2021-09-16","objectID":"/android-diy/:2:0","tags":["安卓","DIY"],"title":"安卓玩机(DIY)心得记录","uri":"/android-diy/"},{"categories":null,"content":"广告问题 ","date":"2021-09-16","objectID":"/android-diy/:3:0","tags":["安卓","DIY"],"title":"安卓玩机(DIY)心得记录","uri":"/android-diy/"},{"categories":null,"content":"体验优化 ","date":"2021-09-16","objectID":"/android-diy/:4:0","tags":["安卓","DIY"],"title":"安卓玩机(DIY)心得记录","uri":"/android-diy/"},{"categories":["network"],"content":"简单的科普一下使用v2ray帮助科学研究和生活学习的方法","date":"2021-06-13","objectID":"/v2ray/","tags":["v2ray","network"],"title":"v2ray简明使用方法","uri":"/v2ray/"},{"categories":["network"],"content":"前言摘要 前情提要: 个人简单写了一些基础的东西, 没有追求准确性or完备性. [有问题请想方设法百度10分钟] 制作目的: 使用谷歌系列和维基百科帮助科学研究和日常学习, 禁止用于其他目的, 违者必究. 制作背景: 谷歌上网助手已经不能访问谷歌了, 但对于科研学习而言谷歌和维基百科的价值依旧很高. 制作者: WXZhao ","date":"2021-06-13","objectID":"/v2ray/:1:0","tags":["v2ray","network"],"title":"v2ray简明使用方法","uri":"/v2ray/"},{"categories":["network"],"content":"简单科普 出于国家政策考量, 为了保护大多数公民的信息安全, 大陆地区在GFW的保护下不能访问部分国外网站. 政策的出发点是好的, 但是这却是对于部分人群产生了一定的影响, 因此我们需要通过一些特殊渠道才能访问有用的国外网站(如谷歌学术, 维基百科等) 方法总结: 流量代理, 简单来说就是虽然是大陆本地设备进行访问, 但是这部分的流量被转发到可以访问国外网站的设备上, 再将结果实时返还到本地电脑上. (这里\"可以访问国外网站的设备\"简单来说就是一台位于国外的计算机) 直接转发的流量会被GFW识别并拦截, 所以在实际使用时会使用VPN/SS/SSR/v2ray/trojan等手段对流量进行加密包装, 尽管如此还是会在一定程度上受到影响, 偶尔出现无法访问的情况. ","date":"2021-06-13","objectID":"/v2ray/:2:0","tags":["v2ray","network"],"title":"v2ray简明使用方法","uri":"/v2ray/"},{"categories":["network"],"content":"重要概念 系统代理: 让本机的所有流量经过代理软件 直接连接: 让本机的所有流量正常进行访问 PAC/规则/高级路由设置: 所有流量走服务器很亏(延时/速度/金钱), 所以通过这些规则让不能访问的流量通过服务器进行访问, 其余的正常访问 ","date":"2021-06-13","objectID":"/v2ray/:3:0","tags":["v2ray","network"],"title":"v2ray简明使用方法","uri":"/v2ray/"},{"categories":["network"],"content":"服务器 有能力或者有更高需求的同学建议直接购买VPS, 自行搭建v2ray/trojan服务, SS/SSR不再推荐使用. 普通用户推荐直接购买成品机场, 机场一般线路较多, 不需要自己维护. 机场的获取方法个人想办法, 本文不负责提供找机场比价担保稳定性等. 这里用一个我最近在用的机场作为示例, 简单展示下如何进行购买和使用, 官方网址(国内无法直接访问): https://paoluz.pw/ 个人推广链接(会自动跳国内):https://owo-qvq-uvu-owo.xn–mes358a082apda.com/auth/register?code=Cyhw ","date":"2021-06-13","objectID":"/v2ray/:4:0","tags":["v2ray","network"],"title":"v2ray简明使用方法","uri":"/v2ray/"},{"categories":["network"],"content":"1. 注册账户 个人邀请码: Cyhw ","date":"2021-06-13","objectID":"/v2ray/:4:1","tags":["v2ray","network"],"title":"v2ray简明使用方法","uri":"/v2ray/"},{"categories":["network"],"content":"2. 购买套餐 购买之前需要充值, 合理选择适合自己的套餐 ","date":"2021-06-13","objectID":"/v2ray/:4:2","tags":["v2ray","network"],"title":"v2ray简明使用方法","uri":"/v2ray/"},{"categories":["network"],"content":"3. 找到订阅链接 如果想要自学直接使用机场内的\"快速使用/社区教程\" ","date":"2021-06-13","objectID":"/v2ray/:4:3","tags":["v2ray","network"],"title":"v2ray简明使用方法","uri":"/v2ray/"},{"categories":["network"],"content":"PC端的使用 请务必保证本机时间与标准时间相差不超过1s, 否则会无法正常使用!!! 测试使用的浏览器建议为新安装的浏览器, 以防止个人操作带来的干扰 本文仅使用全PC平台的Qv2ray做演示: qv2ray最新下载网址: https://github.com/Qv2ray/Qv2ray/releases/latest 蓝奏云下载: https://wwr.lanzoui.com/b02c5kted 密码:v2ray v2ray-core最新下载网址: https://github.com/v2fly/v2ray-core/releases/latest 蓝奏云下载: https://wwr.lanzoui.com/b02c5ktba 密码:v2ray ","date":"2021-06-13","objectID":"/v2ray/:5:0","tags":["v2ray","network"],"title":"v2ray简明使用方法","uri":"/v2ray/"},{"categories":["network"],"content":"1. 安装软件 windows安装exe文件即可 linux可以直接使用AppImage即可[需要先chmod +x ***.AppImage], 双击/命令行运行 mac安装对应dmg文件 ","date":"2021-06-13","objectID":"/v2ray/:5:1","tags":["v2ray","network"],"title":"v2ray简明使用方法","uri":"/v2ray/"},{"categories":["network"],"content":"2. 安装内核 下载对应平台的v2ray-core并解压 首选项 - 内核设置 - 设置内核文件位置 - 检查V2Ray核心设置, 选择自己的解压目录/在默认目录建立文件夹再将文件移动到路径 内核设置成功的提示 ","date":"2021-06-13","objectID":"/v2ray/:5:2","tags":["v2ray","network"],"title":"v2ray简明使用方法","uri":"/v2ray/"},{"categories":["network"],"content":"3. 订阅设置 在分组中创建分组, 使用之前的复制的订阅链接置于订阅地址, 更新订阅并保存 ","date":"2021-06-13","objectID":"/v2ray/:5:3","tags":["v2ray","network"],"title":"v2ray简明使用方法","uri":"/v2ray/"},{"categories":["network"],"content":"4. 使用订阅的某条线路 自行测试哪一条更好用, 可以通过右键测试延迟确定哪些可用 ","date":"2021-06-13","objectID":"/v2ray/:5:4","tags":["v2ray","network"],"title":"v2ray简明使用方法","uri":"/v2ray/"},{"categories":["network"],"content":"5. 实际使用测试 [需要先启用系统代理, 以保证使用] ​ ","date":"2021-06-13","objectID":"/v2ray/:5:5","tags":["v2ray","network"],"title":"v2ray简明使用方法","uri":"/v2ray/"},{"categories":["network"],"content":"6. 其他问题解决: 如果chrome无法使用, 先用EDGE浏览器or火狐浏览器进行测试, chrome问题可能是由于VPN类插件导致的, 也可能是其他的问题. chrome如何都不能使用时建议重新卸载安装or使用Proxy SwitchyOmega 插件解决问题,官网有详细教程 ","date":"2021-06-13","objectID":"/v2ray/:5:6","tags":["v2ray","network"],"title":"v2ray简明使用方法","uri":"/v2ray/"},{"categories":["network"],"content":"手机端 懒得写了, 参考一般机场中会提供的教程,比电脑端更加简单 ","date":"2021-06-13","objectID":"/v2ray/:6:0","tags":["v2ray","network"],"title":"v2ray简明使用方法","uri":"/v2ray/"},{"categories":null,"content":"Receiver Functions 对老的仪器一定要先去仪器响应 震中距要求：远震(teleseismic) 注意，LAB的信号可能是Mantle信号的副产物 通过变化区别区分两种情况 ","date":"2020-05-06","objectID":"/receiver-functions/:0:0","tags":null,"title":"Receiver-Functions","uri":"/receiver-functions/"},{"categories":null,"content":"结构体数组 function(struct.name) struct2table(struct) 标识坐标区坐标 ginput ","date":"2020-05-05","objectID":"/matlab-skills/:1:0","tags":null,"title":"Matlab-skills","uri":"/matlab-skills/"},{"categories":null,"content":"Debug技巧 代码初始添加如下指令即可在错误处停下保留内存中的变量 dbstop if all error ","date":"2020-05-05","objectID":"/matlab-skills/:2:0","tags":null,"title":"Matlab-skills","uri":"/matlab-skills/"},{"categories":["seismic"],"content":"一些概念： 词汇 英文 炮 shot,source 检波器 group,receiver, geophone,hydrophone 道 channel,trace 道集 gather 排列 spread 道间距 receiver interval 炮间距 shot interval 偏移距 offset 覆盖次数 fold 主测线/横测线 Inline 联络线/纵测线 Crossline ","date":"2020-05-04","objectID":"/advances-in-seismic-exploration/:0:0","tags":["seismic","book"],"title":"Advances-in-Seismic-Exploration","uri":"/advances-in-seismic-exploration/"},{"categories":null,"content":"0.写在前面 Git 目前支持的四种协议本地协议、 git://、ssh:// 和 http://，其代理配置各不相同：core.gitproxy 用于 git:// 协议（没用过，不管它），http.proxy 用于 http:// 协议，ssh:// 协议的代理需要配置 ssh 的 ProxyCommand 参数。 ","date":"2020-05-02","objectID":"/git-proxy/:1:0","tags":["git"],"title":"git使用代理加速","uri":"/git-proxy/"},{"categories":null,"content":"代理问题 如何使用不存在的Google不在讨论范围内！但是使用全局代理也并不能对git有效，原理不做讨论~ 如果远程仓库的格式像下面那样，这种就是使用 HTTP 或 HTTPS 协议连接到 Git 仓库的情况 http://github.com/cms-sw/cmssw.git https://github.com/cms-sw/cmssw.git 如果远程仓库的格式像下面那样，这种就是使用 SSH 协议连接到 Git 仓库的情况 git@github.com:cms-sw/cmssw.git ssh://git@github.com/cms-sw/cmssw.git ","date":"2020-05-02","objectID":"/git-proxy/:1:1","tags":["git"],"title":"git使用代理加速","uri":"/git-proxy/"},{"categories":null,"content":"1. HTTP形式 ","date":"2020-05-02","objectID":"/git-proxy/:2:0","tags":["git"],"title":"git使用代理加速","uri":"/git-proxy/"},{"categories":null,"content":"1.1 HTTP代理的配置 针对所有域名的 Git 仓库 git config –global http.proxy protocol://127.0.0.1:port 注意： –glboal 选项指的是修改 Git 的全局配置文件 ~/.gitconfig，而非各个 Git 仓库里的配置文件 .git/config。protocol 指的是代理的协议，如 http，https，socks5 等。port 则为端口号。 举例： #socks5协议 git config --global http.proxy socks5://127.0.0.1:1088 #http协议 git config --global http.proxy http://127.0.0.1:8888 #https协议 git config --global http.proxy https://127.0.0.1:8888 针对特定域名的 Git 仓库 git config –global http.url.proxy protocol://127.0.0.1:port 注意: 此处的 url 即为你需要走代理的仓库域名，url 以 http:// 和 https:// 打头的均用这个方法。 网上很多中文教程，可能会告诉你 https:// 打头的 url 使用“git config –global https.https://example.com.proxy protocol://127.0.0.1:port”，这种做法其实是错的！记住一点：Git 不认 https.proxy*，设置 *http.proxy 就可以支持 https 了。 如果想了解 url 的更多模式，如子域名等的情况，可参照 Git 的官方文档 。网页内容搜索 http..*，即可找到相关信息。 举例: git clone https://github.com/\u003cuser\u003e/\u003crepository\u003e.git # socks5协议 git config --global http.https://github.com.proxy socks5://127.0.0.1:1088 # http协议 git config --global http.https://github.com.proxy http://127.0.0.1:8888 ","date":"2020-05-02","objectID":"/git-proxy/:2:1","tags":["git"],"title":"git使用代理加速","uri":"/git-proxy/"},{"categories":null,"content":"1.2 HTTP代理的使用 # 查看所有配置 git config -l # reset 代理设置 git config --global --unset http.proxy git config --global --unset https.proxy ","date":"2020-05-02","objectID":"/git-proxy/:2:2","tags":["git"],"title":"git使用代理加速","uri":"/git-proxy/"},{"categories":null,"content":"2. SSH形式 在这种情况下，Git 依靠 ssh 处理连接； 为了通过代理进行连接，您必须配置 ssh 本身，在 ~/.ssh/config 文件中设置 ProxyCommand 选项。Linux 和 macOS 是通过 nc 来执行 ProxyCommand 的，Windows 下则是通过 connect。 Windows更多的细节参考connect官方文档 Linux \u0026 Mac直接使用netcat完成相关操作 ","date":"2020-05-02","objectID":"/git-proxy/:3:0","tags":["git"],"title":"git使用代理加速","uri":"/git-proxy/"},{"categories":null,"content":"Windows ProxyCommand \"C:\\Program Files\\Git\\mingw64\\bin\\connect.exe\" -S 127.0.0.1:1088 %h %p ProxyCommand \"C:\\Program Files\\Git\\mingw64\\bin\\connect.exe\" -H 127.0.0.1:8888 %h %p # 测试省略路径依旧可以实现 # SOCKS ProxyCommand connect -S 127.0.0.1:1080 %h %p # HTTP ProxyCommand connect -H 127.0.0.1:1080 %h %p ","date":"2020-05-02","objectID":"/git-proxy/:3:1","tags":["git"],"title":"git使用代理加速","uri":"/git-proxy/"},{"categories":null,"content":"Linux \u0026 Mac # 完整语句 ProxyCommand /usr/bin/ncat --proxy 127.0.0.1:1088 --proxy-type http %h %p # HTTP ProxyCommand nc -X connect -x 127.0.0.1:7890 %h %p # SOCKS ProxyCommand nc -X 5 -x 127.0.0.1:7891 %h %p ProxyCommand nc -x 127.0.0.1:7891 %h %p 所以以下 2 种的写法效果一样 ，都指的是走 socks5 代理： 如果你的代理使用的协议是 socks4/5 , 修改 –proxy-type 后面的协议即可, 例如 –proxy-type socks4 –proxy-type socks5 在调用 ProxyCommand 时，％h 和 ％p 将会被自动替换为目标主机名和 SSH 命令指定的端口（%h 和 %p 不要修改，保留原样即可）。 -X 选项后面接的是 connect 的意思是 HTTPS 代理。 -x 选项后面加上代理地址和端口号。 如果 -X 选项后面接的是数字 5，那么指的就是 socks5 代理。 当然你直接不写上 -X 选项也是可以的，因为在没有指定协议的情况下，默认是使用socks5代理的。 ","date":"2020-05-02","objectID":"/git-proxy/:3:2","tags":["git"],"title":"git使用代理加速","uri":"/git-proxy/"},{"categories":null,"content":"引用 ","date":"2020-05-02","objectID":"/git-proxy/:4:0","tags":["git"],"title":"git使用代理加速","uri":"/git-proxy/"},{"categories":null,"content":"主要参考文章 一文让你了解如何为 Git 设置代理 ","date":"2020-05-02","objectID":"/git-proxy/:4:1","tags":["git"],"title":"git使用代理加速","uri":"/git-proxy/"},{"categories":null,"content":"官方文档 ssh_config ProxyCommand 的内容 nc -X 和 -x 选项的的内容: connect -H 和 S 选项的内容 ","date":"2020-05-02","objectID":"/git-proxy/:4:2","tags":["git"],"title":"git使用代理加速","uri":"/git-proxy/"},{"categories":null,"content":"预备工作 ","date":"2020-05-02","objectID":"/hexo-blog/:1:0","tags":null,"title":"Hexo博客的构建","uri":"/hexo-blog/"},{"categories":null,"content":"服务器 存储端有多种方案，对比如下 方案 特色 Github pages 免费，但是国内的访问速度堪忧 GithubPages + 域名 [付费域名] GithubPages + CodingPages + 域名 [付费域名] 云服务器 + 域名 需要付费购买服务器[付费域名] FTP空间 学校免费提供,但是毕业需要搬迁 个人考量: 低成本域名可以拥有, github服务器足够可靠 软件安装 ","date":"2020-05-02","objectID":"/hexo-blog/:1:1","tags":null,"title":"Hexo博客的构建","uri":"/hexo-blog/"},{"categories":null,"content":"其他事项 ","date":"2020-05-02","objectID":"/hexo-blog/:2:0","tags":null,"title":"Hexo博客的构建","uri":"/hexo-blog/"},{"categories":null,"content":"node版本过高导致的warning $ hexo -s (node:87224) Warning: Accessing non-existent property 'lineno' of module exports inside circular dependency (Use `node --trace-warnings ...` to show where the warning was created) (node:87224) Warning: Accessing non-existent property 'column' of module exports inside circular dependency (node:87224) Warning: Accessing non-existent property 'filename' of module exports inside circular dependency (node:87224) Warning: Accessing non-existent property 'lineno' of module exports inside circular dependency (node:87224) Warning: Accessing non-existent property 'column' of module exports inside circular dependency (node:87224) Warning: Accessing non-existent property 'filename' of module exports inside circular dependency 方案1: node降级到12.xx版本 方案2: 在 package.json 里增加 resolutions 来覆盖版本定义 \"resolutions\": { \"stylus\": \"^0.54.8\" } ","date":"2020-05-02","objectID":"/hexo-blog/:2:1","tags":null,"title":"Hexo博客的构建","uri":"/hexo-blog/"},{"categories":null,"content":"前言 在使用远程设备的时候，SSH是一种高效便捷且安全的手段，使用命令行界面可以有效节省资源并减轻带宽压力。远程桌面是一种解决方案，但是除非在局域网环境或者极其奢侈的网络条件下才能有较为稳定低延迟的体验，但是这肯定是对于资源的一种浪费，因此使用SSH或者web界面才是如今的王道！ ","date":"2020-05-01","objectID":"/setting-ssh/:1:0","tags":["ssh"],"title":"SSH的配置","uri":"/setting-ssh/"},{"categories":null,"content":"产生密钥 ssh-keygen命令 ssh-keygen -b：指定密钥长度； -e：读取openssh的私钥或者公钥文件； -C：添加注释； -f：指定用来保存密钥的文件名； -i：读取未加密的ssh-v2兼容的私钥/公钥文件，然后在标准输出设备上显示openssh兼容的私钥/公钥； -l：显示公钥文件的指纹数据； -N：提供一个新密语； -P：提供（旧）密语； -q：静默模式； -t：指定要创建的密钥类型。 以上的选项中比较重要的是：-C, -f, -P -C在github的密钥产生中会用到； -f可以指定生成的路径和文件名【 】； -P指定密钥的密语（密码）。 举个栗子： ssh-keygen -t rsa -b 4096 -C \"your_email@email.com\" -P '****' -f /path/filename 问题1：如果不使用默认名称，需要使用ssh -i /path/file user@IP ...来登录 问题2：使用-P或者在交互界面设置密语有助于提高密钥的安全性，但是在设置密语后每次SSH登录均需要密码，为了方便反而带来不便？ 这些问题在后面都会解决的！ ","date":"2020-05-01","objectID":"/setting-ssh/:2:0","tags":["ssh"],"title":"SSH的配置","uri":"/setting-ssh/"},{"categories":null,"content":"将公钥添加到指定的账户 #方法1 #一般使用 ssh-copy-id -i /path/file.pub user@IP [-p****] #有些系统使用 ssh-copy-id -i /path/file.pub \"user@IP [-p****]\" #方法2 cat /path/file.pub | ssh [-p **] user@IP \"umask 077;mkdir -p ~/.ssh;cat - \u003e\u003e ~/.ssh/authorized_keys\" ","date":"2020-05-01","objectID":"/setting-ssh/:3:0","tags":["ssh"],"title":"SSH的配置","uri":"/setting-ssh/"},{"categories":null,"content":"删除公钥 如果是Linux运维，需要操作大量的设备，使用ssh端口转发来解决多设备问题 参考ssh端口转发：ssh隧道 和ssh代理转发 ","date":"2020-05-01","objectID":"/setting-ssh/:4:0","tags":["ssh"],"title":"SSH的配置","uri":"/setting-ssh/"},{"categories":null,"content":"使用ssh-agent（ssh代理）管理密钥 ssh并非一定支持ssh-agent转发的连接。要使用ssh-agent的转发功能，需要在sshd_config中开启AllowAgentForwarding选项，在ssh_config中开启ForwardAgent选项。 1. 启动ssh-agent 在 Linux中 ssh-agent 在 X会话 或 登录会话 之初就已经启动，一般都不会有问题,也可以参考以下办法 #方式一:创建子shell, 在子shell中运行ssh-agent进程， 退出子shell自动结束代理。 ssh-agent $SHELL #方式二:单独启动一一个代理进程，退出当前shell时最好使用ssh-agent -k关闭对应代理 eval `ssh-agent` #GitHub给出的相同方案 eval $(ssh-agent -s) 在 Windows 中，我们选取以下方法其中之一即可配置： 在 计算机 \u003e 管理 \u003e 服务 \u003e OpenSSH \u003e Authentication Agent\u003e 设置为自动启动 管理员PowerShell: Set-Service ssh-agent -StartupType Automatic 2. 关闭ssh-agent ssh-agent -k 3. 添加私钥 ssh-add /path/file 4. 查找和删除密钥 #查看代理的私钥 ssh-add -I #查看对应的公钥 ssh-add -L #删除指定 ssh-add -d /path/file #删除所有 ssh-add -D 5. 锁定和解锁ssh-sgent ssh-add -x ssh-add -X 6. ssh-add命令 usage: ssh-add [options] [file ...] Options: -l List fingerprints of all identities. -E hash Specify hash algorithm used for fingerprints. -L List public key parameters of all identities. -k Load only keys and not certificates. -c Require confirmation to sign using identities -m minleft Maxsign is only changed if less than minleft are left (for XMSS) -M maxsign Maximum number of signatures allowed (for XMSS) -t life Set lifetime (in seconds) when adding identities. -d Delete identity. -D Delete all identities. -x Lock agent. -X Unlock agent. -s pkcs11 Add keys from PKCS#11 provider. -e pkcs11 Remove keys provided by PKCS#11 provider. -q Be quiet after a successful operation. ","date":"2020-05-01","objectID":"/setting-ssh/:5:0","tags":["ssh"],"title":"SSH的配置","uri":"/setting-ssh/"},{"categories":null,"content":"ssh配置文件 更为详细的细节查看：官方手册说明 ","date":"2020-05-01","objectID":"/setting-ssh/:6:0","tags":["ssh"],"title":"SSH的配置","uri":"/setting-ssh/"},{"categories":null,"content":"ssh客户端按以下优先顺序接收其配置： 从命令行指定的选项 中定义的选项 ~/.ssh/config 中定义的选项 /etc/ssh/ssh_config ","date":"2020-05-01","objectID":"/setting-ssh/:6:1","tags":["ssh"],"title":"SSH的配置","uri":"/setting-ssh/"},{"categories":null,"content":"ssh用户配置文件 文件~/.ssh/config 常见的配置项 Host #别名 HostName #主机名 Port #端口 User #用户名 IdentityFile #密钥文件的路径 IdentitiesOnly #只接受SSH key 登录 PreferredAuthentications #强制使用Public Key验证 # 走 HTTP 代理 ProxyCommand socat - PROXY:127.0.0.1:%h:%p,proxyport=8888 # 走 socks5 代理（如 Shadowsocks） ProxyCommand nc -v -x 127.0.0.1:1088 %h %p 比较完整的配置文件 Host * #选项“Host”只对能够匹配后面字串的计算机有效。“*”表示所有的计算机。 ForwardAgent no #设置连接是否经过验证代理（如果存在）转发给远程计算机。 ForwardX11 no #设置X11连接是否被自动重定向到安全的通道和显示集（DISPLAY set） RhostsAuthentication no #设置是否使用基于rhosts的安全验证。 RhostsRSAAuthentication no #设置是否使用用RSA算法的基于rhosts的安全验证。 RSAAuthentication yes #设置是否使用RSA算法进行安全验证。 PasswordAuthentication yes #设置是否使用口令验证。 FallBackToRsh no #设置如果用ssh连接出现错误是否自动使用rsh。 UseRsh no #设置是否在这台计算机上使用“rlogin/rsh”。 BatchMode no #如果设为“yes”，passphrase/password（交互式输入口令）的提示将被禁止。当不能交互式输入口令的时候,这个选项对脚本文件和批处理任务十分有用。 CheckHostIP yes #设置ssh是否查看连接到服务器的主机的IP地址以防止DNS欺骗。建议设置为“yes”。 StrictHostKeyChecking no #如果设置成“yes”，ssh就不会自动把计算机的密匙加入“$HOME/.ssh/known_hosts”文件，并且一旦计算机的密匙发生了变化， 就拒绝连接。 IdentityFile ~/.ssh/identity #设置从哪个文件读取用户的RSA安全验证标识。 Port 22 #设置连接到远程主机的端口。 Protocol 2,1　# 选择的 SSH 协议版本，可以是 1 也可以是 2 ，如果要同时支持两者，就必须要使用 2,1 这个分隔了！ GSSAPIAuthenticationno #是否允许使用基于GSSAPI 的用户认证.默认值为\"yes\".仅用于SSH-2 Cipher blowfish #设置加密用的密码。 EscapeChar ~ #设置escape字符。 跳板机相关设置 需要 OpenSSH 7.3 以上版本可以使用ProxyJump 举例: Host tiaoban1 # 代表跳板机 1 HostName 跳板机 1 的 IP Port 22 # ssh 连接端口 User username1 # 跳板机 1 的用户名 Host tiaoban2 # 代表跳板机 2 HostName 跳板机 2 的 IP Port 22 # ssh 连接端口 User username2 # 跳板机 2 的用户名 Host target # 代表目标机器的名字 HostName 目标机器 IP # 这个是目标机器的 IP Port 22 # 目标机器 ssh 的端口 User username_target # 目标机器的用户名 ProxyJump tiaoban1,tiaoban2 Host 10.10.0.* # 使用通配符 * 代表 10.10.0.1 - 10.10.0.255 Port 22 # 服务器端口 User username # 服务器用户名 ProxyJump tiaoban1,tiaoban2 OpenSSH 版本低于 7.3 可以使用ProxyCommand 举例: Host tiaoban # 任意名字，随便使用 HostName 跳板机的 IP，支持域名 Port 22 # 跳板机端口 User username_tiaoban # 跳板机用户 Host target # 同样，任意名字，随便起 HostName 目标服务器 IP # 真正登陆的服务器，不支持域名必须IP地址 Port 22 # 服务器的端口 User username # 服务器的用户 ProxyCommand ssh tiaoban -W %h:%p Host 10.10.0.* # 可以用*通配符 Port 22 # 服务器的端口 User username # 服务器的用户 ProxyCommand ssh tiaoban -W %h:%p ","date":"2020-05-01","objectID":"/setting-ssh/:6:2","tags":["ssh"],"title":"SSH的配置","uri":"/setting-ssh/"},{"categories":null,"content":"ssh系统配置文件 文件/etc/ssh/ssh_config #选项参数 说明 Host * #选项“Host”只对能够匹配后面字串的计算机有效。“*”表示所有的计算机。 ForwardAgent no #设置连接是否经过验证代理（如果存在）转发给远程计算机。 ForwardX11 no #设置X11连接是否被自动重定向到安全的通道和显示集（DISPLAY set） RhostsAuthentication no #设置是否使用基于rhosts的安全验证 RhostsRSAAuthentication no #设置是否使用用RSA算法的基于rhosts的安全验证 RSAAuthentication yes #设置是否使用RSA算法进行安全验证 PasswordAuthentication yes #设置是否使用口令验证 FallBackToRsh no #设置如果用ssh连接出现错误是否自动使用rsh UseRsh no #设置是否在这台计算机上使用“rlogin/rsh” BatchMode no #如果设为“yes”，passphrase/password（交互式输入口令）的提示将被禁止。当不能交互式输入口令的时候，这个选项对脚本文件和批处理任务十分有用 CheckHostIP yes #设置ssh是否查看连接到服务器的主机的IP地址以防止DNS欺骗。建议设置为“yes” StrictHostKeyChecking no #如果设置成“yes”，ssh就不会自动把计算机的密匙加入“$HOME/.ssh/known_hosts”文件，并且一旦计算机的密匙发生了变化，就拒绝连接 IdentityFile ~/.ssh/identity #设置从哪个文件读取用户的RSA安全验证标识 Port 22 #设置连接到远程主机的端口 Cipher blowfish #设置加密用的密码 EscapeChar ~ #设置escape字符 ","date":"2020-05-01","objectID":"/setting-ssh/:6:3","tags":["ssh"],"title":"SSH的配置","uri":"/setting-ssh/"},{"categories":null,"content":"ssh服务器配置文件 文件/etc/ssh/sshd_config #参数选项 说明 Port 22 #SSH 预设使用 22 这个 port，您也可以使用多的 port ！ Protocol 2,1 #选择的 SSH 协议版本，可以是 1 也可以是 2 ，如果要同时支持两者，就必须要使用 2,1 这个分隔了！ ListenAddress 0.0.0.0 #监听的主机适配卡！举个例子来说，如果您有两个 IP，分别是 192.168.0.100 及 192.168.2.20 ，那么只想要开放 192.168.0.100 时，就可以写如同下面的样式： ListenAddress 192.168.0.100 #只监听来自 192.168.0.100 这个 IP 的SSH联机。如果不使用设定的话，则预设所有接口均接受 SSH PidFile /var/run/sshd.pid #可以放置 SSHD 这个 PID 的档案！左列为默认值 LoginGraceTime 600 #当使用者连上 SSH server 之后，会出现输入密码的画面，在该画面中，在多久时间内没有成功连上 SSH server ，就断线！时间为秒！ Compression yes #是否可以使用压缩指令？ HostKey /etc/ssh/ssh_host_key #SSH version 1 使用的私钥 HostKey /etc/ssh/ssh_host_rsa_key #SSH version 2 使用的 RSA 私钥 HostKey /etc/ssh/ssh_host_dsa_key #SSH version 2 使用的 DSA 私钥 KeyRegenerationInterval 3600 #由前面联机的说明可以知道， version 1 会使用 server 的 Public Key ，每隔一段时间来重新建立一次！时间为秒！ ServerKeyBits 768 # Server key 的长度！ SyslogFacility AUTH #当有人使用 SSH 登入系统的时候，SSH会记录信息 LogLevel INFO #登录记录的等级---》全部 PermitRootLogin no #是否允许 root 登入！预设是允许的，但是建议设定成 no！ UserLogin no #在 SSH 底下本来就不接受 login 这个程序的登入！ StrictModes yes #当使用者的 host key 改变之后，Server 就不接受联机 RSAAuthentication yes #是否使用纯的 RSA 认证！？仅针对 version 1 ！ PubkeyAuthentication yes #是否允许 Public Key ？只有 version 2 AuthorizedKeysFile .ssh/authorized_keys #设定若要使用不需要密码登入的账号时，那么那个账号的存放档案所在档名！ RhostsAuthentication no #本机系统不使用 .rhosts ， .rhosts 不安全！ IgnoreRhosts yes #是否取消使用 ~/.ssh/.rhosts 来做为认证！ RhostsRSAAuthentication no #针对 version 1 ，使用 rhosts 档案在/etc/hosts.equiv配合 RSA 演算方式来进行认证！ HostbasedAuthentication no #这个项目与上面的项目类似，不过是给 version 2 使用的！ IgnoreUserKnownHosts no #是否忽略家目录内的 ~/.ssh/known_hosts 这个档案所记录的主机内容 PasswordAuthentication yes #密码验证当然是需要的！ PermitEmptyPasswords no #上面那一项如果设定为 yes 的话，这一项就最好设定为 no ，这个项目在是否允许以空的密码登入！ ChallengeResponseAuthentication yes #挑战任何的密码认证！所以，任何 login.conf 规定的认证方式，均可适用！ PAMAuthenticationViaKbdInt yes #是否启用其它的 PAM 模块！启用这个模块将会导致 PasswordAuthentication 设定失效！ #与Kerberos 有关的参数设定！底下不用设定 KerberosAuthentication no KerberosOrLocalPasswd yes KerberosTicketCleanup yes KerberosTgtPassing no #有关在 X-Window 底下使用的相关设定 X11Forwarding yes X11DisplayOffset 10 X11UseLocalhost yes PrintMotd no #登入后是否显示出一些信息呢？例如上次登入的时间、地点等，预设是 yes ，但是，如果为了安全，可以考虑改为 no ！ PrintLastLog yes #显示上次登入的信息！预设也是 yes KeepAlive yes #一般而言，如果设定这项目的话，那么 SSH Server 会传送KeepAlive 的讯息给 Client 端，以确保两者的联机正常！在这个情况下，任何一端死掉后， SSH 可以立刻知道！而不会有僵尸程序的发生！ UsePrivilegeSeparation yes #使用者的权限设定项目！ MaxStartups 10 #同时允许几个尚未登入的联机画面 DenyUsers * #设定受抵挡的使用者名称 AllowUsers * #设定允许的使用者名称 ","date":"2020-05-01","objectID":"/setting-ssh/:6:4","tags":["ssh"],"title":"SSH的配置","uri":"/setting-ssh/"},{"categories":null,"content":"个人使用示例 配置示例 # ~/.ssh/config Host Work HostName 39.***.***.80 User *** Port *** PreferredAuthentications publickey IdentityFile C:\\Users\\***\\.ssh\\id_rsa_work AddkeysToAgent yes Host github HostName github.com User git PreferredAuthentications publickey IdentityFile C:\\Users\\***\\.ssh\\id_rsa_github_PC AddkeysToAgent yes ProxyCommand connect -S 127.0.0.1:1080 %h %p 实际使用栗子 eval $(ssh-agent -s) #github git clone github:XuzhaoWang/test.git ssh -T github #other ssh Work ","date":"2020-05-01","objectID":"/setting-ssh/:7:0","tags":["ssh"],"title":"SSH的配置","uri":"/setting-ssh/"},{"categories":null,"content":"参考文章 ssh命令和SSH服务详解 SSH概述与配置文件说明 SSH Config 那些你所知道和不知道的事 ssh转发代理：ssh-agent用法详解 ssh转发代理：ssh-agent用法详解 SSH隧道：端口转发功能详解 ","date":"2020-05-01","objectID":"/setting-ssh/:8:0","tags":["ssh"],"title":"SSH的配置","uri":"/setting-ssh/"},{"categories":null,"content":"远程办公 ","date":"2020-05-01","objectID":"/remote-work/:1:0","tags":null,"title":"远程办公","uri":"/remote-work/"},{"categories":null,"content":"SSH客户端 Putty 开源好用，但是不是非常友好 Xshell 由于是商业软件，更新和质量比较稳定且界面友好易用 MobaXterm 功能非常丰富，但是稳定性和易用性没有上面两个优秀 Termius 真·全平台客户端，也比较好，但是感觉用户群体不大 ","date":"2020-05-01","objectID":"/remote-work/:1:1","tags":null,"title":"远程办公","uri":"/remote-work/"},{"categories":null,"content":"虚拟显示器 因为TeamViewer在没打开显示器的情况下之直接从命令行运行可能存在问题，因此可以通过xorg虚拟显示器来实现给Linux服务器开启TeamViewer 安装软件(Ubuntu18)： $ sudo apt-get install xserver-xorg-core-hwe-18.04 $ sudo apt-get install xserver-xorg-video-dummy-hwe-18.04 --fix-missing 配置文件： /usr/share/X11/xorg.conf.d/dummy-1920x1080.conf的内容如下（不建议修改）： Section \"Monitor\" Identifier \"Monitor0\" HorizSync 28.0-80.0 VertRefresh 48.0-75.0 # https://arachnoid.com/modelines/ # 1920x1080 @ 60.00 Hz (GTF) hsync: 67.08 kHz; pclk: 172.80 MHz Modeline \"1920x1080_60.00\" 172.80 1920 2040 2248 2576 1080 1081 1084 1118 -HSync +Vsync EndSection Section \"Device\" Identifier \"Card0\" Driver \"dummy\" VideoRam 256000 EndSection Section \"Screen\" DefaultDepth 24 Identifier \"Screen0\" Device \"Card0\" Monitor \"Monitor0\" SubSection \"Display\" Depth 24 Modes \"1920x1080_60.00\" EndSubSection EndSection 使用方法: 配合nohup sudo X -config xorg.conf #默认0窗口 sudo X :7 -config dummy-1920x1080.conf #开启7窗口 sudo systemctl stop gdm.service #关闭xrog DISPLAY=:0 firefox DISPLAY=:0 gedit export DISPLAY=:0 参考 (Ubuntu)无显示器接入，使用虚拟显示器且远程控制 How to run X server using xserver-xorg-video-dummy driver on Ubuntu ","date":"2020-05-01","objectID":"/remote-work/:1:2","tags":null,"title":"远程办公","uri":"/remote-work/"},{"categories":null,"content":"Vscode-终极神器 vscode的Remote-SSH模块十分好用，可以完成远程调试等功能，解决了笔记本运算能力不足的问题，如果遇到一些必须使用显示的情况还是推荐Teamviewer（视频压缩和传输非常好用，但是不建议用来传输文件） ","date":"2020-05-01","objectID":"/remote-work/:1:3","tags":null,"title":"远程办公","uri":"/remote-work/"},{"categories":null,"content":"学习Git的使用记录","date":"2020-04-30","objectID":"/introduction-of-git/","tags":["git"],"title":"git入门","uri":"/introduction-of-git/"},{"categories":null,"content":"1. 下载和安装git Git 目前支持 Linux/Unix、Solaris、Mac和 Windows 平台上运行 Git 各平台安装包下载地址为：Git 各个平台的安装参考：Git安装和配置教程-菜鸟教程 ","date":"2020-04-30","objectID":"/introduction-of-git/:1:0","tags":["git"],"title":"git入门","uri":"/introduction-of-git/"},{"categories":null,"content":"2.Git 配置 首先在本地创建ssh key； ssh-keygen -t rsa -C \"your_email@youremail.com\" [-f /path/file] 环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方： /etc/gitconfig 文件：系统中对所有用户都普遍适用的配置。若使用 git config 时用 --system 选项，读写的就是这个文件。 ~/.gitconfig 文件：用户目录下的配置文件只适用于该用户。若使用 git config 时用 --global 选项，读写的就是这个文件。 当前项目的 Git 目录中的配置文件（也就是工作目录中的 .git/config 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 .git/config 里的配置会覆盖 /etc/gitconfig 中的同名变量。 ","date":"2020-04-30","objectID":"/introduction-of-git/:2:0","tags":["git"],"title":"git入门","uri":"/introduction-of-git/"},{"categories":null,"content":"用户信息 配置个人的用户名称和电子邮件地址： git config --global user.name \"runoob\" git config --global user.email test@runoob.com 如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 –global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。 git config --system：使对应配置针对系统内所有的用户有效 git config --global：使对应配置针对当前系统用户的所有仓库生效 git config --local：使对应配置只针对当前仓库有效 local选项设置的优先级最高。 ","date":"2020-04-30","objectID":"/introduction-of-git/:2:1","tags":["git"],"title":"git入门","uri":"/introduction-of-git/"},{"categories":null,"content":"文本编辑器 设置Git默认使用的文本编辑器, 一般可能会是 Vi 或者 Vim。如果你有其他偏好，比如 Emacs 的话，可以重新设置：: $ git config --global core.editor emacs ","date":"2020-04-30","objectID":"/introduction-of-git/:2:2","tags":["git"],"title":"git入门","uri":"/introduction-of-git/"},{"categories":null,"content":"差异分析工具 还有一个比较常用的是，在解决合并冲突时使用哪种差异分析工具。比如要改用 vimdiff 的话： $ git config --global merge.tool vimdiff ","date":"2020-04-30","objectID":"/introduction-of-git/:2:3","tags":["git"],"title":"git入门","uri":"/introduction-of-git/"},{"categories":null,"content":"查看配置信息 要检查已有的配置信息，可以使用 git config –list 命令： $ git config --list http.postbuffer=2M user.name=runoob user.email=test@runoob.com ","date":"2020-04-30","objectID":"/introduction-of-git/:2:4","tags":["git"],"title":"git入门","uri":"/introduction-of-git/"},{"categories":null,"content":"实用小技巧 #内建的图形化 git： gitk #彩色的 git 输出： git config color.ui true #显示历史记录时，每个提交的信息只显示一行： git config format.pretty oneline #交互式添加文件到暂存区： git add -i ","date":"2020-04-30","objectID":"/introduction-of-git/:2:5","tags":["git"],"title":"git入门","uri":"/introduction-of-git/"},{"categories":null,"content":"3.git的逻辑 ","date":"2020-04-30","objectID":"/introduction-of-git/:3:0","tags":["git"],"title":"git入门","uri":"/introduction-of-git/"},{"categories":null,"content":"4.git的使用 find .git/objects/ git log --oneline git status git cat-file -t git cat-file -p git rev-parse git diff 比较工作区和暂存区 git diff HEAD 比较工作区和当前分支最新的提交，你可以把HEAD换成别的分支的名字，比如test分支，\"git diff test\"表示比较当前工作区和test分支最新的提交之间的差异，也可以把HEAD替换成任何一个commit的ID，表示比较当前工作区和对应提交之间的差异。 git diff --cached 比较暂存区和当前分支最新的提交 上述命令都是比较所有文件的差异，如果想要指定文件，可以使用\"--\"指定文件的路径，文件路径可以有多个，用空格隔开。 git diff -- file1 git diff -- ./file1 只比较工作区和暂存区中file1文件的差异 git diff -- file1 file2 只比较工作区和暂存区中file1以及file2文件的差异 git diff -- dir1/d1/f1 只比较工作区和暂存区中dir1/d1/f1文件的差异 git diff -- dir1/ 只比较工作区和暂存区中dir1目录中所有文件的差异 git diff HEAD -- ./file1 只比较工作区和当前分支最新的提交中file1文件的差异，HEAD可以替换成分支名或者commitID git diff testbranch -- ./file1 只比较工作区和testbranch分支最新的提交中file1文件的差异 git diff --cached testbranch 比较暂存区和testbranch分支最新的提交 git diff --cached testbranch --./file1 只比较暂存区和testbranch分支最新的提交中file1文件的差异 git diff HEAD~ HEAD 比较当前分支中最新的两个提交之间的差异 git diff HEAD~ HEAD -- file1 比较当前分支中最新的两个提交中的file1文件的差异 git diff commitID1 commitID2 比较两个commit之间的差异 git diff commitID1..commitID2 同上，比较两个commit之间的差异，两个命令等效 git diff branch1 branch2 比较两个分支上最新提交之间的差异 git diff branch1..branch2 同上，比较两个分支上最新提交之间的差异，两个命令等效 ","date":"2020-04-30","objectID":"/introduction-of-git/:4:0","tags":["git"],"title":"git入门","uri":"/introduction-of-git/"},{"categories":null,"content":"听到的科学报告总结，便于日后搜索使用","date":"2020-04-30","objectID":"/weekly-report/","tags":null,"title":"Weekly-Report","uri":"/weekly-report/"},{"categories":null,"content":"报告题目：密集线性台阵拓距相移法背景噪声速度成像 报告人：王悦 指导老师：李俊伦 时间：4月30日（周四） 方法：拓距相移法 Abstract:相移法是浅地表地震勘探的常用方法之一。我们在传统相移法的基础上提出了一种新的基于背景噪声互相关的成像方法-拓距相移法。 该方法将密集台阵的每个台作为中心，按一 定的半径划分台阵，分别进行阵内互相关相移与阵外互相关相移。我们将该方法应用于湖南某矿区成像，采用布设的一、二期共十条测线进行研究，计算密集线性台站间的噪音互相关函 数，然后分别进行阵内与阵外相移，获得中高频(0.1s-0.5s)与中低频(0.5s-1.3s)的相速度频散数据，最后通过反演与插值获得该地区深度达1.5km的地下三维速度结构。 相移法 面波多道分析方法(MASW)是浅地表勘探领域常用的一种方法，常见方法有:频率波数变换法、频率-慢度变换法、相移法、拉东变换法等等。 F-K法要求空间和时间采样间隔相等，波形记录中如果有坏道会对结果产生较大的影响。 T-p变换法和线性拉东变换法均将数据沿一系列直线进行叠加，高阶模式成像质量较好,但基阶式 频散曲线在低频段成像效果较差。 相移法是先将各道数据进行傅里叶变换，然后在空间域进行积分，在不同频率下进行速度扫描，对 基阶模式的成像效果较好。 报告题目：拉萨地体东段下的岩石圈地幔顶部Pn速度变化特征 报告人：李娱兰 指导老师：王宝善 时间：4月30日（周四） 方法：Pn差分成像 Abstract:印度板块持续北向碰撞俯冲，使得青藏高原至今仍处于造山过程中，其内部及周缘地震频发。我们使用青藏高原区域内发生的M\u003e3.0地震数据，利用Pn差分成像的方法得到了拉萨地体东段的上地幔顶部Pn波速度结构。从Pn波成像结果上来看，该区域的上地幔Pn波速度范围为7.76 km/s~8.47km/s,整体呈现出东西向的高低速异常相间的速度带。拉萨地体东段内的申扎-谢通门裂谷、亚东-谷露裂谷和桑日-错那裂谷下均显示为低速异常，裂谷间呈现高速异常。研究区域东侧呈现以92.5°E为界的东高西低速度差异，该区域地球化学的结果认为这是由地幔物质来源不同所造成。日喀则、错那以南的高速异常向东沿雅鲁藏布江缝合带(IYS)展布，结合深地震反射剖面的结果，我们认为该高速异常边界为印度大陆 板块的地壳前缘位置。而印度岩石圈地幔则与其地壳解耦向北俯冲，前缘已经越过了雅鲁藏 布江缝合带。综合己有的研究结果，我们认为印度岩石圈的地壳与岩石圈地幔发生拆离，印度板块地壳北向俯冲不超过IYS。 Pn差分成像:采用台间的Pn波到时差数据(李志伟等,2012) 消去震源项,一定程度上消除了震源参数(震源深度)误差的影响,考虑了Moho面起伏,减小了其对成像的影响。 报告题目：SiO2在下地幔条件下的性质 报告人:孙宁宇(博士后) 指导老师:毛竹 时间: 2020年5月7日(周四) Abstract:SiO2是下地幔俯冲板片中重要的组成成分。了解SiO2在高温高压下的结构和性质对我们理解下地幔中存在的速度不连续面有重要的作用。同时，一些研究希望通过硅酸盐矿物的部分熔融来解释地震学观测在某些区域观察到的低速异常。而相对于其他复杂的体系，SiO2 是我们研究硅酸盐熔融体的一个很好的基础和起点。利用金刚石对顶砧结合X射线衍射技术，我们首先测量得到了SiO2高压相(CaCl2相与Seifertite)的相界与热力学状态方程，并对其可能在下地幔中部产生的速度散射体进行了模拟与解释;同时利用金刚石对顶砧结合布里渊散射技术，我们还研究了温度与压强对SiO2玻璃的速度与结构变化的影响，这对理解地幔深处的硅酸盐流体性质有很重要的作用。 X射线衍射实验的目的： 1.相变与结构 2.热力学状态方程 3.密度和体波波速 布里渊散射实验的目的： 1.密度、横波与纵波波速 2.弹性参数 3.各向异性 二氧化硅的相变： Quartz \u003e coesite \u003e stishovite \u003e CaCl2-phase \u003e PbO2-phase(Selfertite) 报告题目：” 科技论文写作中的“KIDs’ 思维 主讲人:杨宏峰 时间: 2020-05-21 K: Knowledge I: Information D: Data s: succinct Data and Method is actually important. But it is not important in the paper. Ideas/Hypotheses(implicit) → (explicit) 如何写引言? 引言的功能：有机地组合现有知识，传达简单易 懂且关键的信息，让读者能够理解科学问题以 及重要性，并了解该研究的创新之处。 待解决的问题 为何这个问题重要（科学+社会意义）? 前人做了哪些尝试？存在哪些不足? 为何存在这些不足? 你如何解决这个问题?（如何克服瓶颈) 新方法？新数据? 新思路? 如何写“结果”？ 结果的功能:展示数据分析过程、整理 通过数据分析得到的信息或知识 。 数据分析:必要过程及参数一保证结果可以重复 结果要稳定可靠:分辨率测试、误差分析… 抓住数据的核心属性，传达与待解决的科学 问题密切相关的信息 。 通过信息的有机整合，获取新的知识(结论) 报告题目：夏威夷基拉韦厄火山长周期和构造火山事件细分类型和指示意义 时间：2020年5月21日（周四） 报告人：崔星 指导老师：胡岩、李泽峰 摘要：夏威夷基拉韦厄火山区域长期存在不同频段的地震事件，其中长周期事件（峰值频率1–5赫兹，LP) 和火山构造事件（峰值频率5–15赫兹，VT）发生的十分频繁。LP事件通常被认为与岩浆流动、浅层岩浆活动 产生的压力振荡有关；VT事件通常被认为是火山内部岩石脆性破裂的结果。但是由于火山活动过程复杂，两种 地震事件是否能够进行更精细的类以指示更具体的火山活动过程仍未清楚。本文中我们使用聚类分析法对2011 年–2018年夏威夷基拉韦厄地区发生的LP和VT事件进行了更细致的分类，结果表明可以将火山地震事件分为 具有明显时空特征的六组事件。结合2018年基拉韦厄火山爆发过程，通过观察六组火山地震事件的时间分布、空间分布、以及爆发前后发生密度和振幅的变化，我们发现不同组的事件可以反映不同的火山活动过程。 我们的细分方法相比于传统简单的LP事件和VT事件区分方法，即高频和低频振幅的比值(Frequency Index)，提供了更为具体的事件类型信息，揭示了更为多样化的火山活动过程，具有广泛应用到其他火山地 震事件研究的潜力。 报告题目：地慢温压条件下phaseH的弹性：对俯冲带地区下地慢不连续面和地震波各向 异性的启示 时间：2020年5月21日（周四） 报告人：宋子隽 指导老师：吴忠庆 摘要：致密含水镁硅酸盐被认为是输运水到地球内部的主要载体，phaseH作为地球内部存在最深的致密含 水镁硅酸盐，其携带水至下地慢会显著影响地球内部的物理和化学性质以及动力学过程。我们利用基于密度 泛函理论的第一性原理计算的方法得到了地慢温度压力条件下phaseH的热力学和弹性性质。PhaseH的波 速和密度低于下地幔的主要矿物布里奇曼石（bridgmanite)。在冷的俯冲板块，PhaseH在深度约1600公里 处会分解为布里奇曼石和水导致VP，VS和密度分别增加0.9%，2.7%和15%。因此，phaseH的分解可能会 在俯冲带地区1600公里深度附近产生不连续面。此外，在下地慢顶部，phaseH的波速各向异性非常显著。所以，phaseH的存在可以解释一些俯冲带区域的强地震波各向异性。 报告题目:Time-dependent relaxation of crustal stresses: through viscous flow or Stochastic Coulomb frictional slips? 时间：2020年5月22号 报告人:马晓冬（苏黎世理工） Frictional coefficient derived from laboratory experiments： $$ \\boldsymbol{\\tau} \\leq \\boldsymbol{\\mu} \\cdot \\boldsymbol{\\sigma} \\quad \\quad\\left(\\boldsymbol{S}{1}-\\boldsymbol{P}{P}\\right) /\\left(\\boldsymbol{S}{3}-\\boldsymbol{P}{P}\\right)=(\\sqrt{\\boldsymbol{\\mu}^{2}+\\mathbf{1}}+\\boldsymbol{\\mu})^{2} $$ ","date":"2020-04-30","objectID":"/weekly-report/:0:0","tags":null,"title":"Weekly-Report","uri":"/weekly-report/"},{"categories":null,"content":"使用Typora本地编辑预览博客过程中的图片处理问题","date":"2020-04-26","objectID":"/pictures-in-hexo/","tags":null,"title":"Pictures-in-Hexo","uri":"/pictures-in-hexo/"},{"categories":null,"content":"写在前面 这里讨论的方法都以使用Markdown编辑器——Typora能够本地预览且Hexo工作正常为目的,如果擅长js的话建议直接改写插件 ","date":"2020-04-26","objectID":"/pictures-in-hexo/:0:1","tags":null,"title":"Pictures-in-Hexo","uri":"/pictures-in-hexo/"},{"categories":null,"content":"总结 Typora取消全局的上传/复制到相关文件夹设置, 该文件的图片处理方式由文件的Front matter决定, Hexo通过插件hexo-asset-image处理图片的路径问题 ","date":"2020-04-26","objectID":"/pictures-in-hexo/:1:0","tags":null,"title":"Pictures-in-Hexo","uri":"/pictures-in-hexo/"},{"categories":null,"content":"具体操作 ","date":"2020-04-26","objectID":"/pictures-in-hexo/:2:0","tags":null,"title":"Pictures-in-Hexo","uri":"/pictures-in-hexo/"},{"categories":null,"content":"1. 安装配置插件 此处使用修改的hexo-asset-image来在Markdown语法中使用相对路径来引入图片 此处给出自己Fork的版本和原作者的地址 npm install https://github.com/WXZhao7/hexo-asset-image --save npm install https://github.com/CodeFalling/hexo-asset-image --save ","date":"2020-04-26","objectID":"/pictures-in-hexo/:2:1","tags":null,"title":"Pictures-in-Hexo","uri":"/pictures-in-hexo/"},{"categories":null,"content":"2. 设置配置文件 2.1 修改主页配置文件_config.yml以配合hexo-asset-image插件 post_asset_folder: true marked: prependRoot: true postAsset: true 2.2 修改scaffolds文件scaffolds/post.md的front matter --- # draft.md：保存到本地对应文件夹 typora-copy-images-to: {{ title }} typora-root-url: {{ title }} --- --- # post.md：自动上传文件至图床 typora-copy-images-to: upload --- 2.3 修改Typora的设置 重点1：优先使用相对路径 重点2：允许根据YAML设置自动上传文件 ","date":"2020-04-26","objectID":"/pictures-in-hexo/:2:2","tags":null,"title":"Pictures-in-Hexo","uri":"/pictures-in-hexo/"},{"categories":null,"content":"3. 具体效果 3.1 自动创建本地储存图像的文件夹并将插入的图片自动复制到对应的文件夹 hexo new draft LocalTest copy and paste the screenshot hexo server 3.2 使用PicGo自动上传图片至图床以避免本文的所有问题 hexo new draft PostTest copy and paste the screenshot hexo server ","date":"2020-04-26","objectID":"/pictures-in-hexo/:2:3","tags":null,"title":"Pictures-in-Hexo","uri":"/pictures-in-hexo/"},{"categories":null,"content":"4. 其他参考方案 4.1 参考此篇博客(尝试失败) 使Typora可以显示hexo图片 4.2 参考此篇博客(未尝试) 记录 Hexo 图片的坑 将博客根目录下的文件 _config.yml 中的 post_asset_folder: false 改为 post_asset_folder: true。 cmd 在博客根目录下 npm install hexo-asset-image -–save。 将博客根目录下的文件 package.json 中的 “hexo-asset-image”: “1.0.0” 修改为 “hexo-asset-image”: “0.0.3”，在博客根目录下 cmd npm install； 修改 博客根目录\\node_modules\\hexo-asset-image\\index.js 文件中的第 38 行为 var srcArray = decodeURI(src).split(’/’).filter(function(elem){； 在博客根目录下 cmd hexo clean \u0026\u0026 hexo g \u0026\u0026 hexo s，完成。 如果依旧不能使用，可以尝试修改/node_modules/hexo-asset-image/index.js，并不保证可行性 ","date":"2020-04-26","objectID":"/pictures-in-hexo/:2:4","tags":null,"title":"Pictures-in-Hexo","uri":"/pictures-in-hexo/"},{"categories":null,"content":"Calculate the subgrid position in Matlab","date":"2020-04-26","objectID":"/modified-subplot/","tags":["plot"],"title":"Modified-subplot","uri":"/modified-subplot/"},{"categories":null,"content":"Modified subplot.m This function can return the positions of subplot, so we can easily use axes or polaraxes to plot the subpannel~ function [p] = subposition(m,n,margin,gap) % Uniform m*n subplot positions % Input: % m,n m*n grids % margin [mL,mR,mU,mB] % gap [gW,gH] % % Output: % p m*n cells, the position of each grid % mL = margin(1); mR = margin(2); mU = margin(3); mB = margin(4); gW = gap(1); gH = gap(2); p = cell(m,n); W = (1-mL-mR-gW*(n-1))/n; H = (1-mU-mB-gH*(m-1))/m; if W\u003c=0 | H\u003c=0 error('Input error!') end for im = 1:m for in = 1:n pL = mL+(W+gW)*(in-1); pB = mU+(H+gH)*(m-im); p(im,in) = {[pL,pB,W,H]}; end end end ","date":"2020-04-26","objectID":"/modified-subplot/:1:0","tags":["plot"],"title":"Modified-subplot","uri":"/modified-subplot/"},{"categories":null,"content":"For example: % Build a figure figure % set the paper set(gcf,'unit','centimeters','position',[1,1,15,15]) % subplot num. m = 2; n = 2; % margin control margin = [0.1,0.01,0.1,0.1]; % gap control gap = [0.1,0.1]; p = subposition(m,n,margin,gap); % main title title('Test') axis off % subplot 1 axes('Position',cell2mat(p(1,1))) surf(magic(4)) xlabel('x') ylabel('y') zlabel('z') title('t1') % subplot 2 polaraxes('Position',cell2mat(p(1,2))) polarplot(1:10) title('t2') % subplot 3 axes('Position',cell2mat(p(2,1))) scatter([1,2,3],[1,2,3]) xlabel('x') ylabel('y') title('t3') % subplot 4 axes('Position',cell2mat(p(2,2))) imagesc(randn(10)) xlabel('x') ylabel('y') title('t4') ","date":"2020-04-26","objectID":"/modified-subplot/:2:0","tags":["plot"],"title":"Modified-subplot","uri":"/modified-subplot/"},{"categories":null,"content":"Result: ","date":"2020-04-26","objectID":"/modified-subplot/:3:0","tags":["plot"],"title":"Modified-subplot","uri":"/modified-subplot/"},{"categories":null,"content":"About LoveIt","date":"2019-08-02","objectID":"/about/","tags":null,"title":"About LoveIt","uri":"/about/"},{"categories":null,"content":"  LoveIt is a clean, elegant but advanced blog theme for Hugo developed by  Dillon. It is based on the original LeaveIt Theme and KeepIt Theme. Hugo Theme LoveIt ","date":"2019-08-02","objectID":"/about/:0:0","tags":null,"title":"About LoveIt","uri":"/about/"},{"categories":null,"content":"Features ","date":"2019-08-02","objectID":"/about/:1:0","tags":null,"title":"About LoveIt","uri":"/about/"},{"categories":null,"content":"Performance and SEO  Optimized for performance: 99/100 on mobile and 100/100 on desktop in Google PageSpeed Insights  Optimized SEO performance with a correct SEO SCHEMA based on JSON-LD  Google Analytics supported  Fathom Analytics supported  Plausible Analytics supported  Yandex Metrica supported  Search engine verification supported (Google, Bind, Yandex and Baidu)  CDN for third-party libraries supported  Automatically converted images with Lazy Load by lazysizes ","date":"2019-08-02","objectID":"/about/:1:1","tags":null,"title":"About LoveIt","uri":"/about/"},{"categories":null,"content":"Appearance and Layout  Desktop/Mobile responsive layout  Light/Dark mode  Globally consistent design language  Pagination supported  Easy-to-use and self-expanding table of contents  Multilanguage supported and i18n ready  Beautiful CSS animation ","date":"2019-08-02","objectID":"/about/:1:2","tags":null,"title":"About LoveIt","uri":"/about/"},{"categories":null,"content":"Social and Comment Systems  Gravatar supported by Gravatar  Local Avatar supported  Up to 73 social links supported  Up to 24 share sites supported  Disqus comment system supported by Disqus  Gitalk comment system supported by Gitalk  Valine comment system supported by Valine  Facebook comments system supported by Facebook  Telegram comments system supported by Comments  Commento comment system supported by Commento  utterances comment system supported by utterances  giscus comment system supported by giscus ","date":"2019-08-02","objectID":"/about/:1:3","tags":null,"title":"About LoveIt","uri":"/about/"},{"categories":null,"content":"Extended Features  Search supported by Lunr.js or algolia  Twemoji supported  Automatically highlighting code  Copy code to clipboard with one click  Images gallery supported by lightGallery  Extended Markdown syntax for Font Awesome icons  Extended Markdown syntax for ruby annotation  Extended Markdown syntax for fraction  Mathematical formula supported by $\\KaTeX$  Diagrams shortcode supported by mermaid  Interactive data visualization shortcode supported by ECharts  Mapbox shortcode supported by Mapbox GL JS  Music player shortcode supported by APlayer and MetingJS  Bilibili player shortcode  Kinds of admonitions shortcode  Custom style shortcode  Custom script shortcode  Animated typing supported by TypeIt  Cookie consent banner supported by cookieconsent  Person shortcode … ","date":"2019-08-02","objectID":"/about/:1:4","tags":null,"title":"About LoveIt","uri":"/about/"},{"categories":null,"content":"License LoveIt is licensed under the MIT license. Check the LICENSE file for details. ","date":"2019-08-02","objectID":"/about/:2:0","tags":null,"title":"About LoveIt","uri":"/about/"},{"categories":null,"content":"Special Thanks Thanks to the authors of following resources included in the theme: normalize.css Font Awesome Simple Icons Animate.css autocomplete Lunr.js algoliasearch lazysizes object-fit-images Twemoji emoji-data lightGallery clipboard.js Sharer.js TypeIt $\\KaTeX$ mermaid ECharts Mapbox GL JS APlayer MetingJS Gitalk Valine cookieconsent ","date":"2019-08-02","objectID":"/about/:3:0","tags":null,"title":"About LoveIt","uri":"/about/"},{"categories":null,"content":"#— #title: Hello World #date: 2020-02-02 #— Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. ","date":"0001-01-01","objectID":"/hello-world/:0:0","tags":null,"title":"","uri":"/hello-world/"},{"categories":null,"content":"Quick Start ","date":"0001-01-01","objectID":"/hello-world/:1:0","tags":null,"title":"","uri":"/hello-world/"},{"categories":null,"content":"Create a new post $ hexo new \"My New Post\" More info: Writing ","date":"0001-01-01","objectID":"/hello-world/:1:1","tags":null,"title":"","uri":"/hello-world/"},{"categories":null,"content":"Run server $ hexo server More info: Server ","date":"0001-01-01","objectID":"/hello-world/:1:2","tags":null,"title":"","uri":"/hello-world/"},{"categories":null,"content":"Generate static files $ hexo generate More info: Generating ","date":"0001-01-01","objectID":"/hello-world/:1:3","tags":null,"title":"","uri":"/hello-world/"},{"categories":null,"content":"Deploy to remote sites $ hexo deploy More info: Deployment ","date":"0001-01-01","objectID":"/hello-world/:1:4","tags":null,"title":"","uri":"/hello-world/"}]